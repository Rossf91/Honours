/*                      Confidential Information
 *           Limited Distribution to Authorized Persons Only
 *         Copyright (C) 2003-2004 The University of Edinburgh
 *                        All Rights Reserved
 *
 * =====================================================================
 *
 * Description:
 *
 *  This file contains macro definitions which define default variables,
 *  structure sizes, bit-masks etc.
 *
 * ===================================================================*/

#ifndef _define_h_
#define _define_h_

#include "config.h"   // generated by autoheader

/* Builds */

// Default build  - Fast Functional simulator

// COSIM_SIM      - Cosimulation simulator needs cycle accurate simulation
//
#if defined(COSIM_SIM) && !defined(CYCLE_ACC_SIM)
# define CYCLE_ACC_SIM
#endif

// REGTRACK_SIM   - Register usage tracking simulator

// CYCLE_ACC_SIM  - Cycle Accurate simulator needs

// BIG_ENDIAN_SUPPORT - set to 1 to enable big endian binary support
//
#define BIG_ENDIAN_SUPPORT  1

// USE_BSWAP_ASM - set to 1 to enable the use of inline asm for faster
// endian-swapping, using the 'bswap' instruction.
//
#define USE_BSWAP_ASM       0

// CPU ID aux register to enable our multicore programs
//
// FIXME: Once multicore simulation is integrated into ArcSim trunk this option should go away.
//
#define PASTA_CPU_ID_AUX_REG 0

/* Default Configuration */

#define CCM_ENABLED   // Enable Scratchpad memory and timing model

//#define ENABLE_BPRED  // Branch predictor model 

//#define DEBUG_INST_TRACE_EXEC_MODE // enable printing of execution mode during instruction tracing

#define DEFAULT_HASH_CACHE_SIZE   8192 // Hash cache entries
#define DEFAULT_DCODE_CACHE_SIZE  8192 // Decode cache entries
#define DEFAULT_TRANS_CACHE_SIZE  8192 // Translation cache entries


/* Defaults for global variables */

// Configuration defaults
#define DEFAULT_ARCSIM_LIB_NAME  "libsim.so"

#define DEFAULT_HAS_ISA_FILE     false
#define DEFAULT_PRINT_SIM_CFG    false
#define DEFAULT_PRINT_SYS_ARCH   false
#define DEFAULT_PRINT_ARCH_FILE  false

#define DEFAULT_OBJECT_NAME      "target.x"
#define DEFAULT_OBJECT_FORMAT    OF_ELF
#define DEFAULT_TRACE_ON         false
#define DEFAULT_TRACE_START      0
#define DEFAULT_VERBOSITY        false
#define DEFAULT_DEBUG            false
#define DEFAULT_QUIET            false
#define DEFAULT_DUMP_STATE       false

// Default timeslice (instruction/block cound) for processor run methods
//
#define DEFAULT_RUN_TIMESLICE    100000

// Default settings for the JIT engine
//
#define DEFAULT_FAST_TRANS_MODE           kCompilationModePageControlFlowGraph
#define DEFAULT_HOTSPOT_THRESHOLD         4         // HotSpot threshold
#define DEFAULT_TRACE_INTERVAL_SIZE       1000      // Trace interval size (i.e. amount of interpreted blocks)
#define DEFAULT_FAST                      false
#define DEFAULT_FAST_JIT                  true      // LLVM JIT engine is on by default
#define DEFAULT_FAST_NUM_WORKER_THREADS   1         // one JIT thread (i.e. asynchronous JIT) is the default

#define DEFAULT_FAST_ENABLE_DEBUG         false     // debugging of JIT generated code is disabled
#define DEFAULT_FAST_USE_INLINE_ASM       false     // inline asm emit during JIT compilation is disabled
#define DEFAULT_FAST_CC                   JIT_CC
#define DEFAULT_FAST_TMP_DIR              ".arcsim"
// Threshold at which hotspot frequency should be adapted
//
#define DEFAULT_TRANSLATION_QUEUE_SIZE_THRESHOLD 16
// Number by which current processor local hotspot threshold is multiplied
//
#define DEFAULT_HOTSPOT_THRESHOLD_MULTIPLY 10

#define DEFAULT_CYCLE_SIM        false
#define DEFAULT_MEMORY_SIM       false
#define DEFAULT_COSIM            false
#define DEFAULT_KEEP_FILES       false
#define DEFAULT_REUSE_TXLATION   false
#define DEFAULT_SHOW_PROFILE     false
#define DEFAULT_INTERACTIVE      false
#define DEFAULT_EMULATE_TRAPS    false
#define DEFAULT_INIT_MEM_CUSTOM  false
#define DEFAULT_HAS_MMX          false

// Default settings for the ISA options
//
#define DEFAULT_ONLY_16_REGS     false
#define DEFAULT_SHIFT_OPTION     true
#define DEFAULT_SWAP_OPTION      true
#define DEFAULT_NORM_OPTION      true
#define DEFAULT_MPY16_OPTION     true
#define DEFAULT_MPY32_OPTION     true
#define DEFAULT_MPY_LAT_OPTION   9
#define DEFAULT_DIV_REM_OPTION   1
#define DEFAULT_DENSITY_OPTION   true
#define DEFAULT_FFS_OPTION       true
#define DEFAULT_ATOMIC_OPTION    0
#define DEFAULT_SHAS_OPTION      true
#define DEFAULT_SAT_OPTION       false
#define DEFAULT_MUL64_OPTION     false
#define DEFAULT_FPX_OPTION       false
#define DEFAULT_HAS_DMP_PER      false
#define DEFAULT_INTVBASE_PRESET  0
#define DEFAULT_CCM_DEBUG_ENABLED false
#define DEFAULT_IGNORE_BRK_SLEEP false
#define DEFAULT_DISABLE_STACK_SETUP false
#define DEFAULT_STACK_CHECKING false
#define DEFAULT_TURBO_BOOST      false
#define DEFAULT_SMART_STACK_SIZE 0
#define DEFAULT_NUM_INTERRUPTS   32
#define DEFAULT_IC_DISABLE_ON_RESET false
#define DEFAULT_TIMER_0_INT_LEVEL 1
#define DEFAULT_TIMER_1_INT_LEVEL 1
#define DEFAULT_IFQ_SIZE         0
#define DEFAULT_ENABLE_MULTIPLE_ICCMS false

#define DEFAULT_LP_SIZE          32
#define DEFAULT_PC_SIZE          32
#define DEFAULT_ADDR_SIZE        32
#define DEFAULT_FMT_14           false
#define DEFAULT_IC_FEATURE       2
#define DEFAULT_DC_FEATURE       2
#define DEFAULT_DC_UNC_REGION    false
#define DEFAULT_HAS_DMP_MEMORY   false
#define DEFAULT_DC_UNCACHED_REGION false
#define DEFAULT_NUM_ACTIONPOINTS 0
#define DEFAULT_APS_FULL         false
#define DEFAULT_HAS_TIMER0       false
#define DEFAULT_HAS_TIMER1       false
#define DEFAULT_USE_HOST_TIMER   false
#define DEFAULT_HAS_EIA          false
#define DEFAULT_RF_4PORT         true
#define DEFAULT_MPY_FAST         false

/* CC options used in TranslationModule::build_shared_library() for JIT compilation  */
#define DEFAULT_FAST_MODE_CC_OPTS "-O1"

// Profiling counters
//
#define DEFAULT_IS_PC_FREQ_RECORDING_ENABLED                 false
#define DEFAULT_IS_CALL_FREQ_RECORDING_ENABLED               false
#define DEFAULT_IS_CALL_GRAPH_RECORDING_ENABLED              false
#define DEFAULT_IS_LIMM_FREQ_RECORDING_ENABLED               false
#define DEFAULT_IS_DKILLED_RECORDING_ENABLED                 false
#define DEFAULT_IS_KILLED_RECORDING_ENABLED                  false
#define DEFAULT_IS_CACHE_MISS_RECORDING_ENABLED              false
#define DEFAULT_IS_INST_CYCLE_RECORDING_ENABLED              false
#define DEFAULT_IS_INST_MISS_CYCLE_RECORDING_ENABLED         false
#define DEFAULT_IS_OPCODE_LATENCY_DISTRIB_RECORDING_ENABLED  false

// Default Log2 Page Size is log2(8K) = 13
//
#define DEFAULT_LOG2_PAGE_SIZE  (PageArch::k8KPageSizeLog2)

/* Target Architecture global constants */
#define MAX_NO_CORES		1000

// FIXME(iboehm): move this to future interrupt abstraction
#define MAX_IRQ         255
#define MAX_IRQ_LEVELS  16

// System Architecture Levels
#define CORE_LEVEL		1
#define MODULE_LEVEL	2
#define SYSTEM_LEVEL	3

// Cache Replacemnet Policies
#define LRU_REPL        1
#define RAND_REPL       2
#define LFU_REPL        3

/* Always have these. */
#define UNSIGNED_BITS(v,u,l)  (((uint32)(v)<<(31-u))>>(31-u+l))
#define SIGNED_BITS(v,u,l)    (((sint32)(v)<<(31-u))>>(31-u+l))
#define BITSEL(v,b)           (((v)>>b) & 1UL)

// Macros defining MAX functions with different arities
//
#define MAX2(a,b)     ((a) > (b)) ? (a)               : (b)
#define MAX3(a,b,c)   ((a) > (b)) ? MAX2((a),(c))     : MAX2((b),(c))
#define MAX4(a,b,c,d) ((a) > (b)) ? MAX3((a),(c),(d)) : MAX3((b),(c),(d))

// Fast algorithm to check if a 32 bit unsinged integer is a power of two
//
#define IS_POWER_OF_TWO(_x_)  ((uint32)(_x_) && ( !(((uint32)(_x_)-1) & (uint32)(_x_))) )

/* Pre-processor tricks to enable common definitions of data-structres to be
 * re-usable in --fast mode during code-generation of JIT code.
 * For this we need variadic macros and indirect quoting of macro arguments:
 * @see: http://en.wikipedia.org/wiki/C_preprocessor#Indirectly_quoting_macro_arguments
 * @see: http://en.wikipedia.org/wiki/Variadic_macro
 */
#define _QUOTEME(...) #__VA_ARGS__
#define QUOTEME(...) _QUOTEME(__VA_ARGS__)


/* A macro to disallow the copy constructor and operator= functions
 * This should be used in the private: declarations for a class
 */
#define DISALLOW_COPY_AND_ASSIGN(TypeName) \
  TypeName(const TypeName&);               \
  void operator=(const TypeName&)

/* Define sighandler_t if not present (i.e. MacOSX).
 */
#ifdef HAVE_SIG_T
#define sighandler_t sig_t
#elif HAVE___SIGHANDLER_T
#define sighandler_t __sighandler_t
#else
typedef void (*sighandler_t)(int);
#endif

/**
 * ArcSim copyright string
 */
#define ARCSIM_COPYRIGHT QUOTEME(                                               \
\n\t\tArcSim: The Edinburgh High Speed (EHS) Simulator\n                        \
\t\t\tUniversity of Edinburgh (c) 2011\n                                        \
\t\t\t\tRevision: SVN_REV\n\n)

#endif /* _define_h_ */

